import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class ArrayStatistics {
    public static void main(String[] args) {
        int[] arr1 = {16, 18, 27, 16, 23, 21, 19};
        int[] arr2 = {26, 28, 37, 26, 33, 31, 29};
        double[] arr3 = {1.6, 1.8, 2.7, 1.6, 2.3, 2.1, 0.19};
        int[] arr4 = {0, 160, 180, 270, 160, 230, 210, 190, 0};
        int[] arr5 = {200, 180, 180, 270, 160, 270, 270, 190, 200};

        System.out.println("Array 1:");
        printStatistics(arr1);

        System.out.println("\nArray 2:");
        printStatistics(arr2);

        System.out.println("\nArray 3:");
        printStatistics(arr3);

        System.out.println("\nArray 4:");
        printStatistics(arr4);

        System.out.println("\nArray 5:");
        printStatistics(arr5);
    }

    public static void printStatistics(int[] arr) {
        double mean = Arrays.stream(arr).average().orElse(0);
        double median = computeMedian(arr);
        int mode = computeMode(arr);

        System.out.println("Mean = " + mean);
        System.out.println("Median = " + median);
        System.out.println("Mode = " + mode);
    }

    public static double computeMedian(int[] arr) {
        Arrays.sort(arr);
        int n = arr.length;
        if (n % 2 == 0) {
            return (arr[n / 2 - 1] + arr[n / 2]) / 2.0;
        } else {
            return arr[n / 2];
        }
    }

    public static int computeMode(int[] arr) {
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int num : arr) {
            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
        }
        int maxCount = countMap.values().stream().max(Integer::compareTo).orElse(0);
        List<Integer> modes = countMap.entrySet().stream()
                .filter(entry -> entry.getValue() == maxCount)
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());
        return modes.get(0); // Assuming a single mode
    }
}
